module.exports = (req, res) => {
  const { domain } = req.query;
  const name = 'test';
  res.status(200).send(`Hello ${name}!`)
}

// Generated by Gemini
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

/**
 * 指定されたディレクトリ内のn^2枚のJPG画像をタイル状に並べて1つのJPG画像に結合します。
 *
 * @param {string} inputDir - 入力JPG画像が保存されているディレクトリのパス。
 * @param {string} outputPath - 出力される結合済みJPG画像のパスとファイル名。
 * @param {number} n - タイル状に並べる際のグリッドの辺の長さ（例: n=3の場合、3x3のグリッド）。
 * @returns {Promise<void>} 結合処理が完了したときに解決されるPromise。
 */
function combineJpgImages(inputDir, outputPath, n) {
    if (n <= 0) {
        throw new Error("nは正の整数である必要があります。");
    }

    // ディレクトリ内のJPGファイルを取得
    const files = fs.readdirSync(inputDir)
                    .filter(file => file.endsWith('.jpg') || file.endsWith('.jpeg'))
                    .map(file => path.join(inputDir, file));

    if (files.length !== n * n) {
        throw new Error(`入力ディレクトリにはn^2 (${n * n}) 枚のJPG画像が必要です。現在 ${files.length} 枚の画像があります。`);
    }

    // 最初の画像のサイズを取得して、すべての画像が同じサイズであることを前提とします
    const firstImage = sharp(files[0]);
    const metadata = await firstImage.metadata();
    const imageWidth = metadata.width;
    const imageHeight = metadata.height;

    if (!imageWidth || !imageHeight) {
        throw new Error("最初の画像の幅または高さを取得できませんでした。");
    }

    // 出力画像の全体の幅と高さを計算
    const outputWidth = imageWidth * n;
    const outputHeight = imageHeight * n;

    // 各画像を配置するための配列を作成
    const imagesToComposite = [];

    for (let i = 0; i < n; i++) { // 行
        for (let j = 0; j < n; j++) { // 列
            const index = i * n + j;
            if (files[index]) {
                imagesToComposite.push({
                    input: files[index],
                    left: j * imageWidth,
                    top: i * imageHeight
                });
            }
        }
    }

    // 画像を結合して保存
    try {
        await sharp({
            create: {
                width: outputWidth,
                height: outputHeight,
                channels: 4, // RGBA (透明度を考慮)
                background: { r: 0, g: 0, b: 0, alpha: 0 } // 透明な背景
            }
        })
        .composite(imagesToComposite)
        .jpeg({ quality: 90 }) // JPG形式で保存、品質を90に設定
        .toFile(outputPath);

        console.log(`画像を結合し、${outputPath} に保存しました。`);
    } catch (error) {
        console.error("画像の結合中にエラーが発生しました:", error);
        throw error;
    }
}

function main() {
    const inputDirectory = './input_images'; // 入力画像があるディレクトリ
    const outputFileName = './output_image.jpg'; // 出力ファイル名
    const n = 5;

    if (!fs.existsSync(inputDirectory)) {
        fs.mkdirSync(inputDirectory);
        console.log(`ディレクトリ ${inputDirectory} を作成しました。`);
    }

    try {
        combineJpgImages(inputDirectory, outputFileName, n);
    } catch (error) {
        console.error("処理中にエラーが発生しました:", error.message);
    }
}
